<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="insertFile" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="API Url to access the endpoint"/>
    <parameter name="uploadType" description="The resource type media"/>
    <parameter name="ocr" description="Whether to attempt OCR on jpg,.png,gif,pdf uploads"/>
    <parameter name="convert" description="Whether to convert this file to the corresponding Google Docs format"/>
    <parameter name="ocrLanguage" description="The ocr lanuage to use"/>
    <parameter name="pinned" description="Whether to pin the head revision of the uploaded file"/>
    <parameter name="visibility" description="The visibility of the new file"/>
    <parameter name="timedTextLanguage" description="The language of the timed text"/>
    <parameter name="timedTextTrackName" description="The timed text track name"/>
    <parameter name="useContentAsIndexableText" description="Whether to use the content as indexable text"/>
    <parameter name="description" description="A short description of the file"/>
    <parameter name="id" description="The ID of the file"/>
    <parameter name="indexText" description="The text to be indexed for this file"/>
    <parameter name="labelsRestricted" description="Whether viewers and comments are restricted"/>
    <parameter name="labelsStarred" description="Whether this file is starred by the user"/>
    <parameter name="title" description="The title of the file"/>
    <parameter name="labelsViewed" description="Whether this file has been viewed by this user"/>
    <parameter name="mimeType" description="The MIME type of the file"/>
    <parameter name="modifiedDate" description="Last time this file was modified by anyone"/>
    <parameter name="parents" description="Collection of parent folders which contain this file"/>
    <parameter name="properties" description="The list of properties"/>

    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.uploadType" expression="$func:uploadType"/>
        <property name="uri.var.ocr" expression="$func:ocr"/>
        <property name="uri.var.convert" expression="$func:convert"/>
        <property name="uri.var.ocrLanguage" expression="$func:ocrLanguage"/>
        <property name="uri.var.pinned" expression="$func:pinned"/>
        <property name="uri.var.visibility" expression="$func:visibility"/>
        <property name="uri.var.timedTextLanguage" expression="$func:timedTextLanguage"/>
        <property name="uri.var.timedTextTrackName" expression="$func:timedTextTrackName"/>
        <property name="uri.var.useContentAsIndexableText" expression="$func:useContentAsIndexableText"/>
        <property name="uri.var.description" expression="$func:description"/>
        <property name="uri.var.id" expression="$func:id"/>
        <property name="uri.var.indexText" expression="$func:indexText"/>
        <property name="uri.var.labelsRestricted" expression="$func:labelsRestricted"/>
        <property name="uri.var.labelsStarred" expression="$func:labelsStarred"/>
        <property name="uri.var.title" expression="$func:title"/>
        <property name="uri.var.labelsViewed" expression="$func:labelsViewed"/>
        <property name="uri.var.mimeType" expression="$func:mimeType"/>
        <property name="uri.var.modifiedDate" expression="$func:modifiedDate"/>
        <property name="uri.var.properties" expression="$func:properties"/>
        <property name="uri.var.parents" expression="$func:parents"/>
        <property name="uri.var.apiParameters" value=""/>

        <script language="js">
            <![CDATA[
                //request body param variables
                var description = mc.getProperty('uri.var.description');
                var id = mc.getProperty('uri.var.id');
                var indexText = mc.getProperty('uri.var.indexText');
                var labelsRestricted= mc.getProperty('uri.var.labelsRestricted');
                var labelsStarred = mc.getProperty('uri.var.labelsStarred');
                var title = mc.getProperty('uri.var.title');
                var labelsViewed = mc.getProperty('uri.var.labelsViewed');
                var mimeType = mc.getProperty('uri.var.mimeType');
                var modifiedDate = mc.getProperty('uri.var.modifiedDate');
                var properties = mc.getProperty('uri.var.properties');
                var parents = mc.getProperty('uri.var.parents');

                //Get the existing payload
                var payload = mc.getPayloadJSON();

                if (description != null && description != "") {
                    payload["description"] = description;
                }
                if (id != null && id != "") {
                    payload["id"] = id;
                }
                if (indexText != null && indexText != "") {
                   payload["indexableText.text"] = indexText;
                }
                if (labelsRestricted != null && labelsRestricted != "") {
                   payload["labels.restricted"] = labelsRestricted;
                }
                if (labelsStarred != null && labelsStarred != "") {
                    payload["labels.starred"] = labelsStarred;
                }
                if (title != null && title != "") {
                    payload["title"] = title;
                }
                if (labelsViewed != null && labelsViewed != "") {
                    payload["labels.viewed"] = labelsViewed;
                }
                if (mimeType != null && mimeType != "") {
                    payload["mimeType"] = mimeType;
                }
                if (modifiedDate != null && modifiedDate != "") {
                    payload["lastViewedByMeDate"] = modifiedDate;
                }
                if (properties != null && properties != "") {
                    payload["properties"] = properties;
                }
                if (parents != null && parents != "") {
                    payload["parents"] = parents;
                }
                //Set the newly constructed payload
                mc.setPayloadJSON(payload);
			]]>
        </script>
        <filter xpath="(not($ctx:uri.var.ocr = '' or (not(string($ctx:uri.var.ocr)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'ocr=', $ctx:uri.var.ocr, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.convert = '' or (not(string($ctx:uri.var.convert)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'convert=', $ctx:uri.var.convert, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.ocrLanguage = '' or (not(string($ctx:uri.var.ocrLanguage)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'ocrLanguage=', $ctx:uri.var.ocrLanguage, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.pinned = '' or (not(string($ctx:uri.var.pinned)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'pinned=', $ctx:uri.var.pinned, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.timedTextLanguage = '' or (not(string($ctx:uri.var.timedTextLanguage)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'timedTextLanguage=', $ctx:uri.var.timedTextLanguage, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.visibility = '' or (not(string($ctx:uri.var.visibility)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'visibility=', $ctx:uri.var.visibility, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.timedTextLanguage = '' or (not(string($ctx:uri.var.timedTextLanguage)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'timedTextLanguage=', $ctx:uri.var.timedTextLanguage, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.timedTextTrackName = '' or (not(string($ctx:uri.var.timedTextTrackName)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'timedTextTrackName=', $ctx:uri.var.timedTextTrackName, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.useContentAsIndexableText = '' or (not(string($ctx:uri.var.useContentAsIndexableText)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'useContentAsIndexableText=', $ctx:uri.var.useContentAsIndexableText, '&amp;')"/>
            </then>
        </filter>
        <call>
            <endpoint>
                <http method="POST"
                      uri-template="{uri.var.apiUrl}/drive/v2/files?{+uri.var.apiParameters}"/>
            </endpoint>
        </call>
    </sequence>
</template>